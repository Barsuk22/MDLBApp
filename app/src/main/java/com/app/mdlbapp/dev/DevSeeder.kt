import android.util.Log
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.tasks.await
import java.time.LocalDate
import java.time.format.DateTimeFormatter

object DevSeeder {

    /**
     * –ü–æ—Å–µ—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ, —á–µ–≥–æ –ù–ï —Ö–≤–∞—Ç–∞–µ—Ç —É –ø–∞—Ä—ã.
     * –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤—ã—á–∫–∏ ‚Äî –¥–æ—Å–µ–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏; –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª –Ω–∞–≥—Ä–∞–¥—ã ‚Äî –¥–æ—Å–µ–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã.
     */
    suspend fun seedIfEmpty(mommyUid: String, babyUid: String) {
        val db = Firebase.firestore

        val hasHabits = db.collection("habits")
            .whereEqualTo("mommyUid", mommyUid)
            .whereEqualTo("babyUid",  babyUid)
            .limit(1)
            .get().await()
            .isEmpty.not()

        val hasRewards = db.collection("rewards")
            .whereEqualTo("createdBy", mommyUid)
            .whereEqualTo("targetUid", babyUid)
            .limit(1)
            .get().await()
            .isEmpty.not()

        if (!hasHabits) seedHabits(mommyUid, babyUid)
        if (!hasRewards) seedRewards(mommyUid, babyUid)

        Log.d("DevSeeder","seedIfEmpty done: habits=$hasHabits, rewards=$hasRewards")
    }

    // --- –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–µ–≤–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ ---
    private suspend fun seedHabits(mommyUid: String, babyUid: String) {
        val db = Firebase.firestore
        val today = LocalDate.now()
        val fmt = DateTimeFormatter.ISO_LOCAL_DATE

        val habits = listOf(
            mapOf(
                "title" to "–§–æ—Ç–æ –∑–∞–≤—Ç—Ä–∞–∫–∞",
                "repeat" to "daily",
                "deadline" to "16:00",
                "nextDueDate" to today.format(fmt),
                "reportType" to "photo",
                "points" to 5, "penalty" to -10,
                "completedToday" to false,
                "currentStreak" to 0, "longestStreak" to 0,
                "status" to "on", "mommyUid" to mommyUid, "babyUid" to babyUid
            ),
            mapOf(
                "title" to "–§–æ—Ç–æ –æ–±–µ–¥–∞",
                "repeat" to "daily",
                "deadline" to "17:00",
                "nextDueDate" to today.format(fmt),
                "reportType" to "photo",
                "points" to 5, "penalty" to -10,
                "completedToday" to false,
                "currentStreak" to 0, "longestStreak" to 0,
                "status" to "on", "mommyUid" to mommyUid, "babyUid" to babyUid
            ),
            mapOf(
                "title" to "–§–æ—Ç–æ —É–∂–∏–Ω–∞",
                "repeat" to "daily",
                "deadline" to "18:00",
                "nextDueDate" to today.format(fmt),
                "reportType" to "photo",
                "points" to 10, "penalty" to -20,
                "completedToday" to false,
                "currentStreak" to 0, "longestStreak" to 0,
                "status" to "on", "mommyUid" to mommyUid, "babyUid" to babyUid
            ),
            mapOf(
                "title" to "–£—á—ë–±–∞ 20 –º–∏–Ω—É—Ç",
                "repeat" to "weekly",
                "daysOfWeek" to listOf("–ü–Ω","–°—Ä","–ü—Ç"),
                "deadline" to "18:00",
                "nextDueDate" to today.format(fmt),
                "reportType" to "none",
                "points" to 10, "penalty" to -15,
                "completedToday" to false,
                "currentStreak" to 0, "longestStreak" to 0,
                "status" to "on", "mommyUid" to mommyUid, "babyUid" to babyUid
            ),
            mapOf(
                "title" to "–†–∞–∑–æ–≤–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ",
                "repeat" to "once",
                "oneTimeDate" to today.plusDays(2).format(fmt),
                "deadline" to "23:59",
                "nextDueDate" to today.plusDays(2).format(fmt),
                "reportType" to "text",
                "points" to 7, "penalty" to -5,
                "completedToday" to false,
                "currentStreak" to 0, "longestStreak" to 0,
                "status" to "on", "mommyUid" to mommyUid, "babyUid" to babyUid
            ),
            mapOf(
                "title" to "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–æ—Ä–∫–∞",
                "repeat" to "weekly",
                "daysOfWeek" to listOf("–í—Å"),
                "deadline" to "19:00",
                "nextDueDate" to today.format(fmt),
                "reportType" to "none",
                "points" to 10, "penalty" to -15,
                "completedToday" to false,
                "currentStreak" to 0, "longestStreak" to 0,
                "status" to "on", "mommyUid" to mommyUid, "babyUid" to babyUid
            )
        )

        val batch = db.batch()
        habits.forEach { batch.set(db.collection("habits").document(), it) }
        batch.commit().await()
    }

    // --- –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–µ–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥ ---
    private suspend fun seedRewards(mommyUid: String, babyUid: String) {
        val db = Firebase.firestore
        val now = System.currentTimeMillis()

        val rewards = listOf(
            mapOf(
                "title" to "–û–±–Ω–∏–º–∞—à–∫–∏",
                "description" to "–¢—ë–ø–ª—ã–µ –æ–±–Ω–∏–º–∞—à–∫–∏ –æ—Ç –ú–∞–º–æ—á–∫–∏",
                "cost" to 3,
                "type" to "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è",
                "autoApprove" to true,
                "limit" to "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
                "messageFromMommy" to "–ò–¥–∏ –∫ –º–∞–º–æ—á–∫–µ üíó",
                "createdBy" to mommyUid,
                "targetUid" to babyUid,
                "createdAt" to now,
                "pending" to false,
                "pendingBy" to null
            ),
            mapOf(
                "title" to "–ú—É–ª—å—Ç–∏–∫ 15 –º–∏–Ω",
                "description" to "–ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–¥–æ—Å—Ç—å –¥–ª—è –ú–∞–ª—ã—à–∞",
                "cost" to 5,
                "type" to "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è",
                "autoApprove" to false,
                "limit" to "1 –≤ –¥–µ–Ω—å",
                "messageFromMommy" to "–°–Ω–∞—á–∞–ª–∞ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ ‚Äî –ø–æ—Ç–æ–º –º—É–ª—å—Ç–∏–∫ üòâ",
                "createdBy" to mommyUid,
                "targetUid" to babyUid,
                "createdAt" to now,
                "pending" to false,
                "pendingBy" to null
            )
        )

        val batch = db.batch()
        rewards.forEach { batch.set(db.collection("rewards").document(), it) }
        batch.commit().await()
    }
}