//–§–∞–π–ª RulesListScreen.kt
@file:OptIn(ExperimentalMaterial3Api::class)

package com.app.mdlbapp.rule


import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.onGloballyPositioned
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import com.app.mdlbapp.core.Constants
import com.app.mdlbapp.core.ui.AppHeightClass
import com.app.mdlbapp.core.ui.AppWidthClass
import com.app.mdlbapp.core.ui.rememberAppHeightClass
import com.app.mdlbapp.core.ui.rememberAppWidthClass
import com.app.mdlbapp.core.ui.rememberIsLandscape
import java.time.LocalDate
import java.time.LocalTime
import java.time.format.DateTimeFormatter
import com.app.mdlbapp.R
import com.google.firebase.firestore.FieldPath

// ‚Äî‚Äî‚Äî –¢–æ–∫–µ–Ω—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—á–∏–∫–∏)
private data class RulesListUiTokens(
    val contentMaxWidth: Dp,
    val hPad: Dp,
    val vPad: Dp,
    val gap: Dp,
    val topBarPadV: Dp,
    val btnSize: Dp,
    val btnIcon: Dp,
    val titleSize: Float,
    val filterLabelSize: Float,
    val cardCorner: Dp,
    val listGap: Dp
)

@Composable
private fun rememberRulesListUiTokens(): RulesListUiTokens {
    val w = rememberAppWidthClass()
    val h = rememberAppHeightClass()
    val landscape = rememberIsLandscape()
    val phonePortrait  = !landscape && w == AppWidthClass.Compact
    val phoneLandscape =  landscape && h == AppHeightClass.Compact && w != AppWidthClass.Expanded
    val tablet         = w == AppWidthClass.Medium || w == AppWidthClass.Expanded

    val contentMaxWidth = when (w) {
        AppWidthClass.Expanded -> 840.dp
        AppWidthClass.Medium  -> 720.dp
        else -> if (phoneLandscape) 560.dp else 520.dp
    }
    val hPad = if (phoneLandscape) 12.dp else 16.dp
    val vPad = if (phoneLandscape) 10.dp else 16.dp
    val gap  = if (phoneLandscape) 8.dp else 12.dp
    val topV = if (phonePortrait) 8.dp else 6.dp

    val btnSize  = if (phoneLandscape) 44.dp else 48.dp
    val btnIcon  = if (tablet) 26.dp else if (phoneLandscape) 22.dp else 24.dp
    val titleSp  = when {
        tablet -> 26f
        phoneLandscape -> 22f
        else -> 24f
    }
    val filterSp = if (phoneLandscape) 14f else 16f
    val corner   = 12.dp
    val listGap  = if (phoneLandscape) 10.dp else 12.dp

    return RulesListUiTokens(
        contentMaxWidth = contentMaxWidth,
        hPad = hPad,
        vPad = vPad,
        gap = gap,
        topBarPadV = topV,
        btnSize = btnSize,
        btnIcon = btnIcon,
        titleSize = titleSp,
        filterLabelSize = filterSp,
        cardCorner = corner,
        listGap = listGap
    )
}

@Composable
fun RulesListScreen(navController: NavController) {
    val t = rememberRulesListUiTokens()
    val rules = remember { mutableStateListOf<Rule>() }

    val selectedCategoryFilter = remember { mutableStateOf("–í—Å–µ") }
    val categories = listOf("–í—Å–µ", "–ü–æ–≤–µ–¥–µ–Ω–∏–µ", "–†–µ—á—å", "–ö–æ–Ω—Ç–∞–∫—Ç", "–§–∏–∑–∏–∫–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–ü—Ä–æ—á–µ–µ")


    // 1) –ú–∞–º–∏–Ω uid
    val mommyUid = FirebaseAuth.getInstance().currentUser?.uid ?: return

    // 2) –£–∑–Ω–∞—ë–º uid –ú–∞–ª—ã—à–∞ —ç—Ç–æ–π –ú–∞–º–æ—á–∫–∏
    var babyUid by remember { mutableStateOf<String?>(null) }
    LaunchedEffect(mommyUid) {
        Firebase.firestore.collection("users").document(mommyUid).get()
            .addOnSuccessListener { doc -> babyUid = doc.getString("pairedWith") }
    }

    // 3) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ babyUid –ø–æ–ª—É—á–µ–Ω
    DisposableEffect(mommyUid, babyUid) {
        if (babyUid == null) return@DisposableEffect onDispose {}

        val reg = Firebase.firestore.collection("rules")
            .whereEqualTo("createdBy", mommyUid)
            .whereEqualTo("targetUid", babyUid)          // ‚Üê –∏–º–µ–Ω–Ω–æ –ú–ê–õ–´–®
            .orderBy("createdAt")
            .orderBy(FieldPath.documentId())
            .addSnapshotListener { snaps, e ->
                if (e != null) return@addSnapshotListener
                rules.clear()
                snaps?.documents?.forEach { d ->
                    d.toObject(Rule::class.java)?.also { it.id = d.id; rules.add(it) }
                }
            }
        onDispose { reg.remove() }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF8EDE6))
            .windowInsetsPadding(WindowInsets.statusBars)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .align(Alignment.TopCenter)
                .widthIn(max = t.contentMaxWidth)
                .padding(horizontal = t.hPad, vertical = t.vPad)
        ) {
            // ‚Äî‚Äî‚Äî –ï–î–ò–ù–ê–Ø –®–ê–ü–ö–ê: –ú–µ–Ω—é | –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É | –ù–∞–∑–∞–¥
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = t.topBarPadV),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // —Å–ª–µ–≤–∞ ‚Äî –±—É—Ä–≥–µ—Ä
                IconButton(
                    onClick = { /* TODO: –º–µ–Ω—é */ },
                    modifier = Modifier.size(t.btnSize)
                ) {
                    Icon(Icons.Default.Menu, contentDescription = "Menu",
                        modifier = Modifier.size(t.btnIcon), tint = Color.Black)
                }

                // —Ü–µ–Ω—Ç—Ä ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
                Text(
                    text = "–í–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞",
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis,
                    fontSize = t.titleSize.sp,
                    fontStyle = FontStyle.Italic,
                    fontWeight = FontWeight.Medium,
                    color = Color.Black,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.weight(1f)
                )

                // —Å–ø—Ä–∞–≤–∞ ‚Äî –Ω–∞–∑–∞–¥ (—Å–∏–º–º–µ—Ç—Ä–∏—è, —á—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—ã–ª –ò–°–¢–ò–ù–ù–û –ø–æ —Ü–µ–Ω—Ç—Ä—É)
                IconButton(
                    onClick = { navController.popBackStack() },
                    modifier = Modifier.size(t.btnSize)
                ) {
                    Icon(Icons.Default.ArrowBack, contentDescription = "–ù–∞–∑–∞–¥",
                        modifier = Modifier.size(t.btnIcon), tint = Color.Black)
                }
            }

            Spacer(Modifier.height(t.gap))


// üî∂ –§–∏–ª—å—Ç—Ä –≤ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ (–∫–∞–ø—Å—É–ª–∞ + —Å–≤–æ—ë –º–µ–Ω—é)
            val accent = Color(0xFF552216)
            val fieldBg = Color(0xFFFFF3EE)
            val fieldBorder = Color(0xFFE0C2BD)

            var expanded by remember { mutableStateOf(false) }
            var anchorWidthPx by remember { mutableStateOf(0) }
            val density = LocalDensity.current

            Column(Modifier.fillMaxWidth()) {
                // –õ–µ–π–±–ª –Ω–∞–¥ –ø–æ–ª–µ–º, —á—Ç–æ–± –Ω–µ –±—ã–ª–æ ¬´—á–∏–ø–∞¬ª-—è—Ä–ª—ã–∫–∞
                Text(
                    text = "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    fontSize = t.filterLabelSize.sp,
                    fontStyle = FontStyle.Italic,
                    color = accent,
                    modifier = Modifier.padding(start = 4.dp, bottom = 6.dp)
                )

                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .onGloballyPositioned { anchorWidthPx = it.size.width }
                ) {
                    // –ö–∞–ø—Å—É–ª–∞-–ø–æ–ª–µ
                    Surface(
                        shape = RoundedCornerShape(12.dp),
                        color = fieldBg,
                        border = BorderStroke(1.dp, fieldBorder),
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(52.dp)            // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É (–º–æ–∂–Ω–æ 48‚Äì56.dp)
                            .clickable { expanded = true }
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()       // —à–∏—Ä–∏–Ω—É, –Ω–µ –≤—ã—Å–æ—Ç—É
                                .padding(horizontal = 12.dp),
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Text(
                                text = selectedCategoryFilter.value,
                                fontSize = t.filterLabelSize.sp,
                                fontStyle = FontStyle.Italic,
                                color = accent,
                                maxLines = 1,
                                overflow = TextOverflow.Ellipsis
                            )
                            Icon(
                                imageVector = Icons.Default.ArrowDropDown,
                                contentDescription = null,
                                tint = accent,
                                modifier = Modifier.rotate(if (expanded) 180f else 0f)
                            )
                        }
                    }

// –ú–µ–Ω—é —Ç–æ–π –∂–µ —à–∏—Ä–∏–Ω—ã –∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                    val menuShape = RoundedCornerShape(12.dp)

                    DropdownMenu(
                        expanded = expanded,
                        onDismissRequest = { expanded = false },
                        modifier = Modifier
                            .width(with(density) { anchorWidthPx.toDp() })
                            .heightIn(max = 320.dp)                 // –Ω–µ –≤—ã—à–µ —ç–∫—Ä–∞–Ω–∞
                            .shadow(8.dp, menuShape, clip = true)   // –º—è–≥–∫–∞—è —Ç–µ–Ω—å
                            .background(fieldBg, menuShape)         // –∫—Ä–µ–º–æ–≤—ã–π —Ñ–æ–Ω
                            .border(1.dp, fieldBorder, menuShape)   // —Ç–æ–Ω–∫–∏–π –±–æ—Ä–¥–µ—Ä
                    ) {
                        Column(Modifier.padding(vertical = 4.dp)) {
                            categories.forEach { category ->
                                val selected = category == selectedCategoryFilter.value

                                DropdownMenuItem(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(horizontal = 6.dp, vertical = 2.dp)
                                        .clip(RoundedCornerShape(10.dp))
                                        .background(if (selected) accent.copy(alpha = 0.10f) else Color.Transparent),
                                    text = {
                                        Text(
                                            text = category,
                                            color = accent,
                                            fontStyle = FontStyle.Italic,
                                            fontWeight = if (selected) FontWeight.SemiBold else FontWeight.Normal
                                        )
                                    },
                                    trailingIcon = {
                                        if (selected) {
                                            Icon(
                                                imageVector = Icons.Default.Check,
                                                contentDescription = null,
                                                tint = accent
                                            )
                                        }
                                    },
                                    onClick = {
                                        selectedCategoryFilter.value = category
                                        expanded = false
                                    },
                                    colors = MenuDefaults.itemColors(
                                        textColor = accent,
                                        leadingIconColor = accent,
                                        trailingIconColor = accent
                                    )
                                )
                            }
                        }
                    }
                }
            }

            Spacer(Modifier.height(t.gap))

            val filteredRules = remember(rules, selectedCategoryFilter.value) {
                if (selectedCategoryFilter.value == "–í—Å–µ") rules
                else rules.filter { it.category == selectedCategoryFilter.value }
            }

            LazyColumn(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(t.listGap),
                contentPadding = PaddingValues(bottom = t.vPad)
            ) {
                itemsIndexed(filteredRules) { index, rule ->
                    RuleCard(
                        number = index + 1,
                        rule = rule,
                        onDelete = {
                            rules.remove(rule)
                            Firebase.firestore.collection("rules").document(rule.id!!).delete()
                        },
                        onEdit = { navController.navigate("edit_rule/${rule.id}") }
                    )
                }
            }

            Spacer(Modifier.height(t.gap))

            // –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ" ‚Äî –±–æ—Ä–¥–µ—Ä –æ–±—ã—á–Ω—ã–π, –±–µ–∑ deprecated
            OutlinedButton(
                onClick = { navController.navigate("create_rule") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp),
                shape = RoundedCornerShape(12.dp),
                colors = ButtonDefaults.outlinedButtonColors(contentColor = Color(0xFF552216)),
                border = BorderStroke(1.dp, Color(0xFF552216))
            ) {
                Text("Ôºã –ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ", fontSize = 20.sp, fontStyle = FontStyle.Italic)
            }

            Spacer(Modifier.height(8.dp))

            Text(
                text = "–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ª—é–±–∏–º–æ–≥–æ –Ω–∏–∂–Ω–µ–≥–æ :)",
                modifier = Modifier.align(Alignment.CenterHorizontally),
                fontSize = 16.sp,
                fontStyle = FontStyle.Italic,
                color = Color(0xFF552216)
            )
        }
    }
}

// ‚Äî‚Äî‚Äî –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∞–≤–∏–ª–∞: —Ç–µ –∂–µ –∫—Ä–∞—Å–∫–∏, —Ç–æ–ª—å–∫–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
@Composable
fun RuleCard(
    number: Int,
    rule: Rule,
    onDelete: () -> Unit,
    onEdit: () -> Unit
) {
    // –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏
    val w = rememberAppWidthClass()
    val h = rememberAppHeightClass()
    val landscape = rememberIsLandscape()
    val phoneLandscape = landscape && h == AppHeightClass.Compact && w != AppWidthClass.Expanded
    val tablet = w == AppWidthClass.Medium || w == AppWidthClass.Expanded

    val isDisabled = rule.status == RuleStatus.DISABLED
    val backgroundColor = if (isDisabled) Color(0xFFFFF0F0) else Color(0xFFF8EDE6)
    val borderColor = if (isDisabled) Color(0xFFCC8888) else Color(0xFFDEBEB5)
    val titleColor = if (isDisabled) Color(0xFF993333) else Color(0xFF552216)

    val iconSize   = when { tablet -> 48.dp; phoneLandscape -> 34.dp; else -> 45.dp }
    val titleSp    = when { tablet -> 24.sp; phoneLandscape -> 18.sp; else -> 22.sp }
    val bodySp     = when { tablet -> 18.sp; phoneLandscape -> 15.sp; else -> 17.sp }
    val badgeSp    = when { tablet -> 15.sp; else -> 14.sp }
    val closeSize  = when { tablet -> 26.dp; phoneLandscape -> 22.dp; else -> 25.dp }
    val corner     = 12.dp

    Box(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, borderColor, RoundedCornerShape(corner))
            .background(backgroundColor, RoundedCornerShape(corner))
            .padding(12.dp)
    ) {
        Column {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –∫—Ä–µ—Å—Ç–∏–∫–æ–º
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Row(
                    modifier = Modifier.weight(1f),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_rule_name),
                        contentDescription = "–ò–∫–æ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª–∞",
                        modifier = Modifier
                            .size(iconSize)
                            .padding(end = 6.dp)
                    )
                    Column {
                        Text(
                            text = "–ü—Ä–∞–≤–∏–ª–æ $number: ${rule.title}",
                            fontWeight = FontWeight.Bold,
                            fontStyle = FontStyle.Italic,
                            fontSize = titleSp,
                            color = titleColor,
                            maxLines = 2,
                            overflow = TextOverflow.Ellipsis
                        )
                        if (isDisabled) {
                            Text(
                                text = "‚õî –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ",
                                color = Color(0xFF993333),
                                fontStyle = FontStyle.Italic,
                                fontSize = badgeSp
                            )
                        }
                    }
                }
                IconButton(onClick = onDelete) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_close),
                        contentDescription = "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ",
                        tint = Color(0xFF552216),
                        modifier = Modifier.size(closeSize)
                    )
                }
            }

            Spacer(modifier = Modifier.height(4.dp))

            Text(
                text = rule.description,
                fontSize = bodySp,
                color = Color(0xFF4A3C36),
                fontStyle = FontStyle.Italic
            )

            if (!rule.category.isNullOrBlank()) {
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${rule.category}",
                    fontSize = 14.sp,
                    fontStyle = FontStyle.Italic,
                    color = Color(0xFF886C66)
                )
            }

            Spacer(modifier = Modifier.height(6.dp))

            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.End) {
                TextButton(onClick = onEdit) {
                    Text(
                        text = "–ò–∑–º–µ–Ω–∏—Ç—å",
                        color = Color(0xFF552216),
                        fontSize = 16.sp,
                        fontStyle = FontStyle.Italic
                    )
                }
            }
        }
    }
}

fun computeNextDueDateForHabit(
    repeatMode: String,
    daysOfWeek: List<String>?,
    oneTimeDate: String?,
    deadline: String?,
    fromDate: LocalDate,
    nowTime: LocalTime
): LocalDate? {
    // –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏ weekly –º—ã —É–∂–µ —É–º–µ–µ–º —Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç,
    // —Ç–∞–∫ —á—Ç–æ –¥–µ–ª–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ: –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É ‚Üí LocalDate
    return when (repeatMode) {
        "daily" -> {
            // –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º —Å—Ç—Ä–æ–∫—É –∏ –ø–∞—Ä—Å–∏–º –µ—ë
            getNextDueDate("daily", null, null, deadline, fromDate, nowTime)
                ?.let { LocalDate.parse(it) }
        }
        "weekly" -> {
            getNextDueDate("weekly", daysOfWeek, null, deadline, fromDate, nowTime)
                ?.let { LocalDate.parse(it) }
        }
        "once" -> {
            // –µ—Å–ª–∏ oneTimeDate –µ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–∞–∫ LocalDate
            oneTimeDate
                ?.takeIf { it.matches(Regex("\\d{4}-\\d{2}-\\d{2}")) }
                ?.let { LocalDate.parse(it) }
        }
        else -> null
    }
}

fun getNextDueDate(
    repeatMode: String,
    daysOfWeek: List<String>? = null,
    oneTimeDate: String? = null,
    deadline: String? = null,
    today: LocalDate,
    nowTime: LocalTime
): String? {
    val formatter = DateTimeFormatter.ofPattern("HH:mm")

    // –ü–∞—Ä—Å–∏–º –¥–µ–¥–ª–∞–π–Ω
    val deadlineTime = deadline
        ?.takeIf { it.matches(Regex("\\d{2}:\\d{2}")) }
        ?.let { LocalTime.parse(it, formatter) }

    return when (repeatMode) {
        "daily" -> {
            // –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–∑–¥–Ω–æ ‚Äî –∑–∞–≤—Ç—Ä–∞, –∏–Ω–∞—á–µ —Å–µ–≥–æ–¥–Ω—è
            if (deadlineTime != null && nowTime.isAfter(deadlineTime))
                today.plusDays(1).toString()
            else
                today.toString()
        }

        "weekly" -> {
            if (daysOfWeek.isNullOrEmpty()) return null
            val wanted = daysOfWeek.mapNotNull { Constants.ruToDayOfWeek[it] }
            if (wanted.isEmpty()) return null

            val startOffset = if (deadlineTime != null && nowTime.isAfter(deadlineTime)) 1L else 0L
            val best = (startOffset..6L).asSequence()
                .map { offset -> today.plusDays(offset) }
                .first { date -> date.dayOfWeek in wanted }

            best.toString()
        }

        "once" -> {
            // –ï—Å–ª–∏ oneTimeDate –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
            oneTimeDate
                ?.takeIf { it.matches(Regex("\\d{4}-\\d{2}-\\d{2}")) }
        }
        else   -> null
    }
}

fun migrateRuleStatuses(mommyUid: String) {
    val db = Firebase.firestore
    db.collection("rules").whereEqualTo("createdBy", mommyUid).get()
        .addOnSuccessListener { snaps ->
            val batch = db.batch()
            snaps.documents.forEach { d ->
                when (d.getString("status")) {
                    "–ê–∫—Ç–∏–≤–Ω–æ" -> batch.update(d.reference, "status", RuleStatus.ACTIVE)
                    "–í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ" -> batch.update(d.reference, "status", RuleStatus.DISABLED)
                }
            }
            batch.commit()
        }
}

// "–ü—Ä–æ–¥–∞–∫—à–Ω"-–æ–±–æ–ª–æ—á–∫–∞, –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
fun getNextDueDate(
    repeatMode: String,
    daysOfWeek: List<String>? = null,
    oneTimeDate: String? = null,
    deadline: String? = null
): String? = getNextDueDate(
    repeatMode,
    daysOfWeek,
    oneTimeDate,
    deadline,
    LocalDate.now(),
    LocalTime.now()
)