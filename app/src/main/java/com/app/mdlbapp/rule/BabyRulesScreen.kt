package com.app.mdlbapp.rule

import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import com.app.mdlbapp.rule.ui.rememberBabyRulesUiTokens
import com.app.mdlbapp.R
import com.app.mdlbapp.rule.data.Rule
import com.app.mdlbapp.rule.data.migrateRulesCreatedAt
import com.google.firebase.firestore.FieldPath
import kotlinx.coroutines.tasks.await

// ‚Äî‚Äî‚Äî –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª



@Composable
fun BabyRulesScreen(navController: NavHostController) {
    val t = rememberBabyRulesUiTokens()
    val rules = remember { mutableStateListOf<Rule>() }
    var mommyUid by remember { mutableStateOf<String?>(null) }

    val context = LocalContext.current

    // 1) –¢—è–Ω–µ–º mommyUid (–∞–∫–∫—É—Ä–∞—Ç–Ω–æ, —Å await ‚Äî —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ)
    LaunchedEffect(Unit) {
        val babyUid = FirebaseAuth.getInstance().currentUser?.uid ?: return@LaunchedEffect
        val doc = Firebase.firestore.collection("users").document(babyUid).get().await()
        mommyUid = doc.getString("pairedWith")
    }

    // 1.1) –ö–æ–≥–¥–∞ mommyUid –ø–æ—è–≤–∏–ª—Å—è ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–∞–≤–∏–ª –ú–∞–º–æ—á–∫–∏
    LaunchedEffect(mommyUid) {
        mommyUid?.let { mom ->
            try {
                val fixedTime = migrateRulesCreatedAt(mom) // —Ç–≤–æ—è —Å—Ç–∞—Ä–∞—è –º–∏–≥—Ä–∞—Ü–∏—è createdAt
                val baby = FirebaseAuth.getInstance().currentUser?.uid
                var fixedTarget = 0
                if (baby != null) {
                    fixedTarget = migrateRulesTargetUid(mom, baby)
                }
                val total = fixedTime + fixedTarget
                if (total > 0) {
                    Toast.makeText(context, "–ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: $total", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                Log.e("Rules", "migrate failed", e)
            }
        }
    }

    // 2) –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –ú–∞–º–æ—á–∫–∏ ‚Üí –ú–∞–ª—ã—à
    DisposableEffect(mommyUid) {
        val babyUid = FirebaseAuth.getInstance().currentUser?.uid
        if (babyUid == null || mommyUid == null) return@DisposableEffect onDispose {}

        val reg = Firebase.firestore.collection("rules")
            .whereEqualTo("targetUid", babyUid)
            .whereEqualTo("createdBy", mommyUid)
            .orderBy("createdAt")
            .orderBy(FieldPath.documentId())
            .addSnapshotListener { snaps, e ->
                if (e != null) {
                    Log.e("Rules", "Listen failed", e) // –Ω–µ –≥–ª–æ—Ç–∞–µ–º –æ—à–∏–±–∫—É, –∑–∞–π—á–∏–∫
                    return@addSnapshotListener
                }
                rules.clear()
                snaps?.documents?.forEach { d ->
                    d.toObject(Rule::class.java)?.also { it.id = d.id; rules.add(it) }
                }
            }
        onDispose { reg.remove() }
    }

    Box(
        Modifier
            .fillMaxSize()
            .background(Color(0xFFF8EDE6))
    ) {
        Column(
            Modifier
                .fillMaxWidth()
                .align(Alignment.TopCenter)
                .widthIn(max = t.contentMaxWidth)
                .padding(horizontal = t.hPad, vertical = t.vPad)
        ) {
            // üîù –ï–¥–∏–Ω–∞—è —à–∞–ø–∫–∞: —Å—Ç—Ä–µ–ª–∫–∞ + —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 4.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // —Å–ª–µ–≤–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª–æ—á–∫–∞ (–∫—Ä—É–ø–Ω–∞—è –∑–æ–Ω–∞ —Ç–∞–ø–∞)
                IconButton(
                    onClick = { navController.popBackStack() },
                    modifier = Modifier.size(48.dp) // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–ø–∞
                ) {
                    Icon(
                        painter = painterResource(R.drawable.ic_back),
                        contentDescription = "–ù–∞–∑–∞–¥",
                        tint = Color(0xFF552216),
                        modifier = Modifier.size(t.backIcon) // —Å–∞–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–∫–∏ –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
                    )
                }

                // –ø–æ —Ü–µ–Ω—Ç—Ä—É ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
                Text(
                    text = "üìú –ü—Ä–∞–≤–∏–ª–∞ –ú–∞–º–æ—á–∫–∏",
                    maxLines = 1,
                    overflow = androidx.compose.ui.text.style.TextOverflow.Ellipsis,
                    fontSize = t.titleSize.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF552216),
                    textAlign = TextAlign.Center,
                    modifier = Modifier.weight(1f)
                )

                // —Å–ø—Ä–∞–≤–∞ ‚Äî –ø—É—Å—Ç—ã—à–∫–∞ —Ç–æ–π –∂–µ —à–∏—Ä–∏–Ω—ã, —á—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—ã–ª –ò–°–¢–ò–ù–ù–û –ø–æ —Ü–µ–Ω—Ç—Ä—É
                Spacer(Modifier.size(48.dp))
            }

            Spacer(Modifier.height(t.gap))

            if (rules.isEmpty()) {
                Text(
                    text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª...\n–ñ–¥–∏ —É–∫–∞–∑–∞–Ω–∏–π üïä",
                    fontStyle = FontStyle.Italic,
                    fontSize = t.emptySize.sp,
                    color = Color.DarkGray,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth()
                )
            } else {
                LazyColumn(
                    verticalArrangement = Arrangement.spacedBy(t.listGap),
                    contentPadding = PaddingValues(bottom = t.bottomPad),
                    modifier = Modifier.fillMaxWidth()
                ) {
                    itemsIndexed(rules) { index, rule ->
                        RuleCard(
                            number = index + 1,
                            rule = rule,
                            onDelete = {},   // –ú–∞–ª—ã—à –Ω–µ —É–¥–∞–ª—è–µ—Ç
                            onEdit = {}      // –∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç
                        )
                    }
                }
            }
        }
    }
}


suspend fun migrateRulesTargetUid(mommyUid: String, babyUid: String): Int {
    val db = Firebase.firestore
    var fixed = 0

    // 1) –£ –∫–æ–≥–æ –≤–æ–æ–±—â–µ –Ω–µ—Ç targetUid ‚Äî –ø—Ä–æ—Å—Ç–∞–≤–∏–º
    val noTarget = db.collection("rules")
        .whereEqualTo("createdBy", mommyUid)
        .get().await()
        .documents
        .filter { !it.contains("targetUid") || it.getString("targetUid").isNullOrBlank() }

    noTarget.forEach { d ->
        db.runBatch { b ->
            // –µ—Å–ª–∏ –µ—Å—Ç—å legacy-–ø–æ–ª–µ babyUid ‚Äî –≤–æ–∑—å–º—ë–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–æ—Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ú–∞–ª—ã—à–∞
            val legacy = d.getString("babyUid")
            b.update(d.reference, mapOf("targetUid" to (legacy ?: babyUid)))
        }.await()
        fixed++
    }

    // 2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ babyUid ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å/—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å createdAt
    // –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º targetUid. –ß–∏—Å—Ç–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.

    return fixed
}