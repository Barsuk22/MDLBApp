@file:OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)

package com.app.mdlbapp.data.call

import android.Manifest
import android.app.AppOpsManager
import android.app.NotificationManager
import android.content.*
import android.net.Uri
import android.os.Build
import android.os.PowerManager
import android.provider.Settings
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.unit.dp
import androidx.core.app.NotificationManagerCompat
import androidx.core.net.toUri
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import com.app.mdlbapp.CALLS_CH_ID
import com.app.mdlbapp.ui.call.IncomingCallActivity

// ‚Äî‚Äî‚Äî –ø–æ–º–æ—â–Ω–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî‚Äî‚Äî
private fun overlayAllowed(ctx: Context): Boolean =
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)
        Settings.canDrawOverlays(ctx)
    else true

private fun notificationsEnabled(ctx: Context): Boolean =
    NotificationManagerCompat.from(ctx).areNotificationsEnabled()

private fun fullScreenAllowed(ctx: Context): Boolean {
    if (Build.VERSION.SDK_INT < 34) return true
    val appOps = ctx.getSystemService(AppOpsManager::class.java)
    val mode = try {
        appOps.unsafeCheckOpNoThrow("android:use_full_screen_intent",
            android.os.Process.myUid(), ctx.packageName)
    } catch (_: Throwable) {
        AppOpsManager.MODE_ALLOWED
    }
    return mode == AppOpsManager.MODE_ALLOWED
}

private fun callChannelHigh(ctx: Context): Boolean {
    if (Build.VERSION.SDK_INT < 26) return true
    val nm = ctx.getSystemService(NotificationManager::class.java)
    val ch = nm.getNotificationChannel(CALLS_CH_ID) ?: return false
    return ch.importance >= NotificationManager.IMPORTANCE_HIGH
}

private fun batteryOptimOk(ctx: Context): Boolean {
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return true
    val pm = ctx.getSystemService(PowerManager::class.java)
    return pm?.isIgnoringBatteryOptimizations(ctx.packageName) == true
}

private fun isMiui(): Boolean {
    val b = Build.BRAND ?: ""
    val m = Build.MANUFACTURER ?: ""
    return listOf("XIAOMI","REDMI","POCO").any {
        b.equals(it, true) || m.equals(it, true)
    }
}

// ‚Äî‚Äî‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–æ—Å—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–æ—à–∫–∏ –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî‚Äî‚Äî
private fun isStepOk(ctx: Context, step: ReadinessStep): Boolean = when (step) {
    ReadinessStep.NOTIF   -> NotificationManagerCompat.from(ctx).areNotificationsEnabled()
    ReadinessStep.FS      -> fullScreenAllowed(ctx)
    ReadinessStep.CHANNEL -> callChannelHigh(ctx)
    ReadinessStep.BATTERY -> batteryOptimOk(ctx)
    ReadinessStep.MIUI_TIPS -> false // ‚Üê –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –ø–æ–∫–∞ —é–∑–µ—Ä —Å–∞–º –Ω–µ –æ—Ç–∫–ª—é—á–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
}

@Composable
fun AutoCallReadinessWindows() {
    val ctx = LocalContext.current
    val lifecycle = LocalLifecycleOwner.current.lifecycle

    var show by remember { mutableStateOf(false) }
    var queue by remember { mutableStateOf(emptyList<ReadinessStep>()) }
    var idx by rememberSaveable { mutableStateOf(0) }

    fun refresh() {
        val q = buildQueue(ctx)
        queue = q
        // –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º—Å—è; –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        show = q.isNotEmpty()
        if (idx >= q.size) idx = 0
        // –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ —É–∂–µ –ø–æ—á–∏–Ω–µ–Ω ‚Äî –ø–µ—Ä–µ–ø—Ä—ã–≥–Ω–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        while (show && idx < q.size && isStepOk(ctx, q[idx])) idx++
        if (idx >= q.size) { show = false; idx = 0 }
    }

    LaunchedEffect(Unit) { refresh() }
    DisposableEffect(lifecycle) {
        val obs = LifecycleEventObserver { _, e ->
            if (e == Lifecycle.Event.ON_RESUME) refresh()
        }
        lifecycle.addObserver(obs)
        onDispose { lifecycle.removeObserver(obs) }
    }

    if (show && idx < queue.size) {
        val step = queue[idx]
        val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)
        ModalBottomSheet(onDismissRequest = { show = false }, sheetState = sheetState) {
            StepByStepReadinessSheet(
                step = step,
                onDidAction = { refresh() },     // –ø–æ—Å–ª–µ –∫–ª–∏–∫–æ–≤ ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º
                onNext = {
                    idx++
                    if (idx >= queue.size) refresh() else refresh()
                },
                onCloseNow = { show = false }
            )
        }
    }
}



// –û–±—ë—Ä—Ç–∫–∞: ¬´–ø–µ—Ä–µ–¥ –∑–≤–æ–Ω–∫–æ–º¬ª. –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî —Å—Ä–∞–∑—É run(); –∏–Ω–∞—á–µ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–∞.
@Composable
fun rememberCallReadinessLauncher(runWhenReady: () -> Unit): () -> Unit {
    val ctx = LocalContext.current
    var pending by remember { mutableStateOf(false) }

    // –∫–æ–≥–¥–∞ pending=true ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω,
    // –∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç –ø–æ–∫–∞–∂–µ—Ç —à–∞–≥–∏ –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ onResume
    LaunchedEffect(pending) {
        if (!pending) return@LaunchedEffect
        pending = false

        val queue = buildQueue(ctx)
        if (queue.isEmpty()) {
            runWhenReady()
            return@LaunchedEffect
        }

        when (queue.first()) {
            ReadinessStep.NOTIF   -> openAppNotificationSettings(ctx)
            ReadinessStep.FS      -> openFsIntentSettings(ctx)
            ReadinessStep.CHANNEL -> openCallChannelSettings(ctx)
            ReadinessStep.BATTERY -> openBatteryOpt(ctx)
            ReadinessStep.MIUI_TIPS -> openMiuiPermEditor(ctx)
        }
    }

    // –≤–µ—Ä–Ω—ë–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–≤–µ—Å–∏—Ç—å –Ω–∞ onClick
    return { pending = true }
}


// ‚Äî‚Äî‚Äî –∫–∞–∫–∏–µ —à–∞–≥–∏ –±—ã–≤–∞—é—Ç ‚Äî‚Äî‚Äî
private enum class ReadinessStep { NOTIF, FS, CHANNEL, BATTERY, MIUI_TIPS }

// —Å–æ–±–µ—Ä—ë–º –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ –∏–∑ ¬´–ø—Ä–æ–ø–∞–≤—à–∏—Ö¬ª —à–∞–≥–æ–≤ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
private fun buildQueue(ctx: Context): List<ReadinessStep> {
    val m = MissingChecks.build(ctx) // —Ç—É—Ç —É–∂–µ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è showMiuiTips –ø–æ –±—Ä–µ–Ω–¥—É
    val q = mutableListOf<ReadinessStep>()
    if (m.needNotif)   q += ReadinessStep.NOTIF
    if (m.needFs)      q += ReadinessStep.FS
    if (m.needChannel) q += ReadinessStep.CHANNEL
    if (m.needBattery) q += ReadinessStep.BATTERY

    val miuiDismissed = ctx.getSharedPreferences("ready", 0)
        .getBoolean("miui_tips_dismissed", false)
    if (m.showMiuiTips && !miuiDismissed) q += ReadinessStep.MIUI_TIPS

    return q
}


// ‚Äî‚Äî‚Äî UI –ª–∏—Å—Ç –æ–∫–æ—à–µ–∫ ‚Äî‚Äî‚Äî

@Composable
private fun StepByStepReadinessSheet(
    step: ReadinessStep,
    onDidAction: () -> Unit,
    onNext: () -> Unit,
    onCloseNow: () -> Unit
) {
    val ctx = LocalContext.current

    // launcher –¥–ª—è POST_NOTIFICATIONS (Android 13+)
    val notifLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { onDidAction() }

    Column(Modifier.fillMaxWidth().padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("–î–∞–≤–∞–π –≤—Å—ë –≤–∫–ª—é—á–∏–º, –º–∞–ª—ã—à, —à–∞–∂–æ—á–∫–æ–º üêæ", style = MaterialTheme.typography.titleMedium)

        when (step) {
            ReadinessStep.NOTIF -> StepCard(
                title = "–†–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                desc  = "–ò–Ω–∞—á–µ –∑–≤–æ–Ω–æ–∫ –º–æ–∂–µ—Ç —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è.",
                primary = if (Build.VERSION.SDK_INT >= 33) "–†–∞–∑—Ä–µ—à–∏—Ç—å" else "–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                onPrimary = {
                    if (Build.VERSION.SDK_INT >= 33) {
                        notifLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
                    } else openAppNotificationSettings(ctx)
                },
                secondary = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω—å–∫–∏",
                onSecondary = { openAppNotificationSettings(ctx) },
                onDone = onDidAction
            )

            ReadinessStep.FS -> StepCard(
                title = "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø–æ–≤–µ—Ä—Ö –∑–∞–º–∫–∞",
                desc  = "–†–∞–∑—Ä–µ—à–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω.",
                primary = "–û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
                onPrimary = { openFsIntentSettings(ctx) },
                onDone = onDidAction
            )

            ReadinessStep.CHANNEL -> StepCard(
                title = "–ö–∞–Ω–∞–ª ¬´–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏¬ª",
                desc  = "–°–¥–µ–ª–∞–π –≤–∞–∂–Ω–æ—Å—Ç—å –í–´–°–û–ö–ê–Ø –∏ –≤–∫–ª—é—á–∏ –∑–≤—É–∫.",
                primary = "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª",
                onPrimary = { openCallChannelSettings(ctx) },
                onDone = onDidAction
            )

            ReadinessStep.BATTERY -> StepCard(
                title = "–ù–µ –¥—É—à–∏—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–æ–π",
                desc  = "–†–∞–∑—Ä–µ—à–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –∑–≤–æ–Ω–∫–∏ –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–ª–∏.",
                primary = "–†–∞–∑—Ä–µ—à–∏—Ç—å",
                onPrimary = { requestBatteryDialogIfPossible(ctx) }, // ‚Üê —Å–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                onDone = onDidAction
            )

            ReadinessStep.MIUI_TIPS -> Column(
                Modifier.fillMaxWidth(),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                // 1) "–î—Ä—É–≥–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" MIUI ‚Äî –≤—Å–ø–ª—ã–≤–∞—à–∫–∏, —ç–∫—Ä–∞–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —è—Ä–ª—ã–∫–∏
                StepCard(
                    title = "MIUI: –î—Ä—É–≥–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                    desc  = "–í–∫–ª—é—á–∏ ¬´–í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞¬ª, ¬´–ù–∞ —ç–∫—Ä–∞–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏¬ª, ¬´–°–æ–∑–¥–∞–≤–∞—Ç—å —è—Ä–ª—ã–∫–∏¬ª.",
                    primary = "–û—Ç–∫—Ä—ã—Ç—å MIUI-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                    onPrimary = { openMiuiPermEditor(ctx); onDidAction() },
                    onDone = onDidAction
                )

                // 2) –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏ –ë–∞—Ç–∞—Ä–µ—è (—Ç–≤–æ–∏ –≥–æ—Ç–æ–≤—ã–µ —è—Ä–ª—ã–∫–∏)
                StepButtonsRow(
                    "MIUI: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫" to { openMiuiAutostart(ctx); onDidAction() },
                    "MIUI: –ë–∞—Ç–∞—Ä–µ—è"    to { openMiuiBattery(ctx);  onDidAction() }
                )

                // 3) –ü–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π + –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/–≠–∫—Ä–∞–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                StepButtonsRow(
                    "–ü–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"      to { openOverlaySettings(ctx);            onDidAction() },
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è / –≠–∫—Ä–∞–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏" to { openAppNotificationSettings(ctx);    onDidAction() }
                )

                // 4) –°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ ¬´–ó–∞–∫—Ä–µ–ø–∏—Ç—å —è—Ä–ª—ã–∫¬ª
                StepButtonsRow(
                    "–ó–∞–∫—Ä–µ–ø–∏—Ç—å —è—Ä–ª—ã–∫" to { requestPinShortcutSample(ctx); onDidAction() }
                )

                // 5) –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å MIUI-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                TextButton(onClick = {
                    ctx.getSharedPreferences("ready", 0)
                        .edit().putBoolean("miui_tips_dismissed", true).apply()
                    onDidAction()
                }) { Text("–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–ª—è MIUI –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ") }

                // 5–∞) ¬´–ì–æ—Ç–æ–≤–æ¬ª ‚Äî –∑–∞–∫—Ä—ã—Ç—å MIUI-–ø–æ–¥—Å–∫–∞–∑–∫–∏
                TextButton(onClick = {
                    ctx.getSharedPreferences("ready", 0)
                        .edit().putBoolean("miui_tips_dismissed", true).apply()
                    onDidAction()
                }) { Text("–ì–æ—Ç–æ–≤–æ ‚Äî —è –≤—Å—ë –≤–∫–ª—é—á–∏–ª") }
            }
        }

        Spacer(Modifier.height(4.dp))
        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.End) {
            TextButton(onClick = onCloseNow) { Text("–ü–æ—Ç–æ–º") }
        }
        Spacer(Modifier.height(8.dp))
    }
}

// ‚Äî‚Äî‚Äî Overlay (–ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π) ‚Äî —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî‚Äî‚Äî
private fun openOverlaySettings(ctx: Context) {
    // —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º MIUI "–¥—Ä—É–≥–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    if (isMiui()) {
        openMiuiPermEditor(ctx)
        return
    }
    // –¥–∞–ª–µ–µ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ overlay
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
        runCatching {
            ctx.startActivity(
                Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION)
                    .setData(Uri.parse("package:${ctx.packageName}"))
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            )
        }.onFailure {
            runCatching {
                ctx.startActivity(
                    Intent(Settings.ACTION_SETTINGS).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                )
            }
        }
    } else {
        runCatching {
            ctx.startActivity(
                Intent(Settings.ACTION_SETTINGS).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            )
        }
    }
}

// ‚Äî‚Äî‚Äî –°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ ¬´–ó–∞–∫—Ä–µ–ø–∏—Ç—å —è—Ä–ª—ã–∫¬ª (Android 8+) ‚Äî‚Äî‚Äî
private fun requestPinShortcutSample(ctx: Context) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val sm = ctx.getSystemService(android.content.pm.ShortcutManager::class.java)
        if (sm?.isRequestPinShortcutSupported == true) {
            val shortcut = android.content.pm.ShortcutInfo.Builder(ctx, "mdlb_chat")
                .setShortLabel("–ß–∞—Ç —Å –ú–∞–º–æ—á–∫–æ–π")
                .setIntent(
                    Intent(ctx, com.app.mdlbapp.MainActivity::class.java)
                        .setAction(Intent.ACTION_VIEW)
                        .putExtra("openChat", true)
                )
                .build()
            sm.requestPinShortcut(shortcut, null) // ‚Üê –ø–æ–∫–∞–∂–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        } else {
            // –ù–∞ —Å—Ç–∞—Ä—ã—Ö MIUI –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ç—É–º–±–ª–µ—Ä ¬´–°–æ–∑–¥–∞–≤–∞—Ç—å —è—Ä–ª—ã–∫–∏¬ª –≤ ¬´–î—Ä—É–≥–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö¬ª
            openMiuiPermEditor(ctx)
        }
    } else {
        runCatching {
            ctx.startActivity(
                Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
                    .setData(Uri.parse("package:${ctx.packageName}"))
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            )
        }
    }
}

private fun requestBatteryDialogIfPossible(ctx: Context) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
        val pm = ctx.getSystemService(PowerManager::class.java)
        val pkg = ctx.packageName
        if (!pm.isIgnoringBatteryOptimizations(pkg)) {
            runCatching {
                ctx.startActivity(
                    Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)
                        .setData(Uri.parse("package:$pkg"))
                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                )
            }.onFailure {
                // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                ctx.startActivity(
                    Intent(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS)
                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                )
            }
        }
    }
}

// ‚Äî‚Äî‚Äî Full-screen intent (Android 14+) ‚Äî‚Äî‚Äî
private fun openFsIntentSettings(ctx: Context) {
    if (Build.VERSION.SDK_INT >= 34) {
        runCatching {
            ctx.startActivity(
                Intent(Settings.ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT).apply {
                    data = Uri.parse("package:${ctx.packageName}")
                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                }
            )
        }.onFailure { openAppNotificationSettings(ctx) }
    } else openAppNotificationSettings(ctx)
}

@Composable
private fun StepCard(
    title: String,
    desc: String,
    primary: String,
    onPrimary: () -> Unit,
    secondary: String? = null,
    onSecondary: (() -> Unit)? = null,
    onDone: () -> Unit
) {
    ElevatedCard(Modifier.fillMaxWidth()) {
        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {
            Text(title, style = MaterialTheme.typography.titleMedium)
            Text(desc, style = MaterialTheme.typography.bodyMedium)
            Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                Button(onClick = { onPrimary(); onDone() }) { Text(primary) }
                if (secondary != null && onSecondary != null) {
                    OutlinedButton(onClick = { onSecondary(); onDone() }) { Text(secondary) }
                }
            }
        }
    }
}

@Composable
private fun StepButtonsRow(vararg pairs: Pair<String, () -> Unit>) {
    Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
        pairs.forEach { (t, a) ->
            OutlinedButton(onClick = a, modifier = Modifier.fillMaxWidth()) { Text(t) }
        }
    }
}

// ‚Äî‚Äî‚Äî –º–æ–¥–µ–ª—å ¬´—á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç¬ª ‚Äî‚Äî‚Äî
data class MissingChecks(
    val needNotif: Boolean = false,
    val needFs: Boolean = false,
    val needChannel: Boolean = false,
    val needBattery: Boolean = false,
    val showMiuiTips: Boolean = false
) {
    val allOk: Boolean get() = !needNotif && !needFs && !needChannel
    val hasAny: Boolean get() = !allOk

    companion object {
        fun build(ctx: Context): MissingChecks {
            val notif   = !notificationsEnabled(ctx)
            val fs      = !fullScreenAllowed(ctx)
            val channel = !callChannelHigh(ctx)
            val battery = !batteryOptimOk(ctx)
            val miui    = isMiui()

            val miuiDismissed = ctx.getSharedPreferences("ready", 0)
                .getBoolean("miui_tips_dismissed", false)

            // –ü–û–î–°–¢–ê–í–¨ –≠–¢–û:
            val showMiui = miui && !miuiDismissed && !overlayAllowed(ctx)

            return MissingChecks(
                needNotif = notif,
                needFs = fs,
                needChannel = channel,
                needBattery = battery,
                showMiuiTips = showMiui
            )
        }
    }
}

// ‚Äî‚Äî‚Äî –æ—Ç–∫—Ä—ã–≤–∞—à–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ ‚Äî‚Äî‚Äî
private fun openAppNotificationSettings(ctx: Context) {
    val i = Intent(Settings.ACTION_APP_NOTIFICATION_SETTINGS)
        .putExtra(Settings.EXTRA_APP_PACKAGE, ctx.packageName)
        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
    runCatching { ctx.startActivity(i) }
}

private fun openCallChannelSettings(ctx: Context) {
    val i = Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS)
        .putExtra(Settings.EXTRA_APP_PACKAGE, ctx.packageName)
        .putExtra(Settings.EXTRA_CHANNEL_ID, CALLS_CH_ID)
        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
    runCatching { ctx.startActivity(i) }
}

private fun openBatteryOpt(ctx: Context) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
        val p = ctx.packageName
        runCatching {
            ctx.startActivity(
                Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)
                    .setData("package:$p".toUri())
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            )
        }
        runCatching {
            ctx.startActivity(
                Intent(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            )
        }
    } else {
        runCatching {
            ctx.startActivity(Intent(Settings.ACTION_SETTINGS).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK))
        }
    }
}

private fun openMiuiPermEditor(ctx: Context) {
    val pkg = ctx.packageName
    val intents = listOf(
        // 1) —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π action
        Intent("miui.intent.action.APP_PERM_EDITOR").putExtra("extra_pkgname", pkg),

        // 2) —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∞–∫—Ç–∏–≤–∏—Ç–∏ –Ω–∞ MIUI/HyperOS
        Intent().setClassName(
            "com.miui.securitycenter",
            "com.miui.permcenter.permissions.AppPermissionsEditorActivity"
        ).putExtra("extra_pkgname", pkg),

        Intent().setClassName(
            "com.miui.securitycenter",
            "com.miui.permcenter.permissions.PermissionsEditorActivity"
        ).putExtra("extra_pkgname", pkg),

        // –í–ù–ò–ú–ê–ù–ò–ï: –∑–¥–µ—Å—å —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º $
        Intent().setClassName(
            "com.miui.securitycenter",
            "com.miui.permcenter.permissions.PermissionsEditorActivity\$AppDetailActivity"
        ).putExtra("extra_pkgname", pkg)
    )

    for (i in intents) {
        try {
            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            ctx.startActivity(i)
            return
        } catch (_: Throwable) { /* –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π */ }
    }

    // —Ñ–æ–ª–±—ç–∫ ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    runCatching {
        ctx.startActivity(
            Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
                .setData(Uri.parse("package:$pkg"))
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        )
    }
}

private fun openMiuiAutostart(ctx: Context) {
    val intents = listOf(
        Intent().setComponent(
            ComponentName(
                "com.miui.securitycenter",
                "com.miui.permcenter.autostart.AutoStartManagementActivity"
            )
        ),
        Intent("miui.intent.action.APP_PERM_EDITOR")
            .putExtra("extra_pkgname", ctx.packageName)
    )
    for (i in intents) {
        try {
            ctx.startActivity(i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK))
            return
        } catch (_: Throwable) {}
    }
    openMiuiPermEditor(ctx)
}

private fun openMiuiBattery(ctx: Context) {
    runCatching {
        val i = Intent().apply {
            component = ComponentName("com.miui.powerkeeper","com.miui.powerkeeper.ui.HiddenAppsConfigActivity")
            putExtra("package_name", ctx.packageName)
            putExtra("package_label", "MDLBApp")
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        }
        ctx.startActivity(i)
    }.onFailure {
        runCatching {
            ctx.startActivity(Intent(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK))
        }
    }
}
