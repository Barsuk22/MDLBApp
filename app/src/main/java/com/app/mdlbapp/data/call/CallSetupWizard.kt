@file:OptIn(ExperimentalMaterial3Api::class)

package com.app.mdlbapp.data.call

import android.app.AppOpsManager
import android.app.NotificationManager
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import android.provider.Settings
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.app.NotificationManagerCompat
import com.app.mdlbapp.CALLS_CH_ID
import com.app.mdlbapp.data.call.FullscreenIntentPrompt   // —Ç–≤–æ–π –∫–æ–º–ø–æ—É–∑–∏–∫
import com.app.mdlbapp.data.call.CallPermissionsShortcuts // —Ç–≤–æ–∏ —è—Ä–ª—ã—á–∫–∏ MIUI

@Composable
fun CallSetupWizard(
    onAllGood: () -> Unit
) {
    val ctx = LocalContext.current

    // –î–µ—Ç–µ–∫—Ç–æ—Ä –±—Ä–µ–Ω–¥–∞ –¥–ª—è ¬´—É–º–Ω—ã—Ö¬ª –ø–æ–¥—Å–∫–∞–∑–æ–∫
    val isXiaomi = remember {
        listOf("XIAOMI","REDMI","POCO").any { Build.BRAND.equals(it, true) || Build.MANUFACTURER.equals(it, true) }
    }

    // –®–∞–≥ 1 ‚Äî –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Android 13+)
    val needsNotifPerm = remember {
        Build.VERSION.SDK_INT >= 33 &&
                !NotificationManagerCompat.from(ctx).areNotificationsEnabled()
    }

    // –®–∞–≥ 2 ‚Äî –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç (Android 14+): –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ AppOps (—É —Ç–µ–±—è –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π UI)
    fun isFsAllowed(): Boolean {
        if (Build.VERSION.SDK_INT < 34) return true
        val appOps = ctx.getSystemService(AppOpsManager::class.java)
        val mode = try {
            appOps.unsafeCheckOpNoThrow("android:use_full_screen_intent",
                android.os.Process.myUid(), ctx.packageName)
        } catch (_: Throwable) {
            AppOpsManager.MODE_ALLOWED
        }
        return mode == AppOpsManager.MODE_ALLOWED
    }
    var needsFs by remember { mutableStateOf(!isFsAllowed()) }

    // –®–∞–≥ 3 ‚Äî –ö–∞–Ω–∞–ª –∑–≤–æ–Ω–∫–æ–≤: –µ—Å—Ç—å –ª–∏ –∏ –≤–∞–∂–Ω–æ—Å—Ç—å HIGH
    fun isCallChannelReady(): Boolean {
        if (Build.VERSION.SDK_INT < 26) return true
        val nm = ctx.getSystemService(NotificationManager::class.java)
        val ch = nm.getNotificationChannel(CALLS_CH_ID) ?: return false
        return ch.importance >= NotificationManager.IMPORTANCE_HIGH
    }
    var needsChannelFix by remember { mutableStateOf(!isCallChannelReady()) }

    // –®–∞–≥ 4 ‚Äî –í–µ–Ω–¥–æ—Ä—Å–∫–∏–µ —è—Ä–ª—ã–∫–∏ (MIUI): –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    val needsMiuiHelp = isXiaomi

    // –ö–Ω–æ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    fun openAppNotifications() {
        val i = Intent(Settings.ACTION_APP_NOTIFICATION_SETTINGS)
            .putExtra(Settings.EXTRA_APP_PACKAGE, ctx.packageName)
        ctx.startActivity(i)
    }
    fun openCallChannelSettings() {
        val i = Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS)
            .putExtra(Settings.EXTRA_APP_PACKAGE, ctx.packageName)
            .putExtra(Settings.EXTRA_CHANNEL_ID, CALLS_CH_ID)
        ctx.startActivity(i)
    }
    fun requestIgnoreBattery() {
        val i = Intent(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS)
        ctx.startActivity(i)
    }

    // UI
    Column(Modifier.fillMaxSize().padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–æ–Ω–∫–æ–≤", style = MaterialTheme.typography.headlineSmall)
        Text("–ú–∞–ª—ã—à, –¥–∞–≤–∞–π –≤—Å—ë –≤–∫–ª—é—á–∏–º, —á—Ç–æ–±—ã –∑–≤–æ–Ω–∫–∏ –≤—Å–ø–ª—ã–≤–∞–ª–∏ –±–æ–ª—å—à–∏–º–∏ –æ–∫–æ—à–∫–∞–º–∏ –¥–∞–∂–µ –Ω–∞ –∑–∞–º–∫–µ —ç–∫—Ä–∞–Ω–∞ üòä")

        // –®–∞–≥ 1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (needsNotifPerm) StepCard(
            title = "–†–∞–∑—Ä–µ—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            desc  = "–ò–Ω–∞—á–µ –∑–≤–æ–Ω–æ–∫ –º–æ–∂–µ—Ç —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è.",
            actionLabel = "–û—Ç–∫—Ä—ã—Ç—å",
            onAction = { openAppNotifications() },
            onRecheck = {
                // –ø—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞
                if (NotificationManagerCompat.from(ctx).areNotificationsEnabled()) {
                    // –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                }
            }
        )

        // –®–∞–≥ 2: –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Android 14+)
        if (Build.VERSION.SDK_INT >= 34) StepCard(
            title = "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫",
            desc  = "–†–∞–∑—Ä–µ—à–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–≤–æ–Ω–∫–∞ –ø–æ–≤–µ—Ä—Ö –∑–∞–º–∫–∞ —ç–∫—Ä–∞–Ω–∞.",
            actionLabel = "–û—Ç–∫—Ä—ã—Ç—å",
            onAction = {
                val i = Intent(Settings.ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT).apply {
                    data = Uri.parse("package:${ctx.packageName}")
                }
                ctx.startActivity(i)
            },
            onRecheck = { needsFs = !isFsAllowed() }
        )

        // –®–∞–≥ 3: –ö–∞–Ω–∞–ª –∑–≤–æ–Ω–∫–æ–≤ (–≤–∞–∂–Ω–æ—Å—Ç—å HIGH, –∑–≤—É–∫)
        if (needsChannelFix) StepCard(
            title = "–ö–∞–Ω–∞–ª ¬´–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏¬ª",
            desc  = "–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤–∞–∂–Ω–æ—Å—Ç—å ‚Äî –í–´–°–û–ö–ê–Ø –∏ –≤–∫–ª—é—á—ë–Ω –∑–≤—É–∫.",
            actionLabel = "–û—Ç–∫—Ä—ã—Ç—å",
            onAction = { openCallChannelSettings() },
            onRecheck = { needsChannelFix = !isCallChannelReady() }
        )

        // –®–∞–≥ 4: MIUI-–ø–æ–º–æ—â—å (–ø–æ–∫–∞–∂–µ–º —Ç–≤–æ–∏ –∫–Ω–æ–ø–∫–∏-—è—Ä–ª—ã–∫–∏)
        if (needsMiuiHelp) {
            Divider()
            Text("–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è MIUI", style = MaterialTheme.typography.titleMedium)
            CallPermissionsShortcuts() // —Ç–≤–æ–∏ –≥–æ—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏-—è—Ä–ª—ã–∫–∏. :contentReference[oaicite:5]{index=5}
        }

        // –®–∞–≥ 5: (–æ–ø—Ü.) –ò–≥–Ω–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –±–∞—Ç–∞—Ä–µ–∏
        StepCard(
            title = "–ù–µ –¥—É—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–π–∫–æ–π",
            desc  = "–î–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –∑–≤–æ–Ω–æ–∫ –Ω–µ –æ–ø–æ–∑–¥–∞–ª.",
            actionLabel = "–û—Ç–∫—Ä—ã—Ç—å",
            onAction = { requestIgnoreBattery() }
        )

        Spacer(Modifier.weight(1f))
        Button(
            onClick = {
                // –∏—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –≤—Å—ë –ª–∏ –≥–æ—Ç–æ–≤–æ
                val ok = NotificationManagerCompat.from(ctx).areNotificationsEnabled() &&
                        (Build.VERSION.SDK_INT < 34 || isFsAllowed()) &&
                        isCallChannelReady()
                if (ok) onAllGood() else Unit
            },
            modifier = Modifier.fillMaxWidth()
        ) { Text("–ì–æ—Ç–æ–≤–æ!") }
    }
}

@Composable
private fun StepCard(
    title: String,
    desc: String,
    actionLabel: String,
    onAction: () -> Unit,
    onRecheck: (() -> Unit)? = null
) {
    ElevatedCard(Modifier.fillMaxWidth()) {
        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(6.dp)) {
            Text(title, style = MaterialTheme.typography.titleMedium)
            Text(desc, style = MaterialTheme.typography.bodyMedium)
            Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
                TextButton(onClick = onAction) { Text(actionLabel) }
                if (onRecheck != null) TextButton(onClick = onRecheck) { Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å") }
            }
        }
    }
}
